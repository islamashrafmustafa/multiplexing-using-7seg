
32-two_7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000224  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000224  000002b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006a  0080006a  000002c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e9  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000737  00000000  00000000  00000de1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000665  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00001b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000474  00000000  00000000  00001cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c6  00000000  00000000  00002134  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000024fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e2       	ldi	r30, 0x24	; 36
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 36       	cpi	r26, 0x6D	; 109
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6f 00 	call	0xde	; 0xde <main>
  8a:	0c 94 10 01 	jmp	0x220	; 0x220 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <set_port_direction>:
		default: break;
	}
}
void set_port_direction(unsigned char portname,unsigned char direction)
{
	switch(portname)
  92:	82 34       	cpi	r24, 0x42	; 66
  94:	59 f0       	breq	.+22     	; 0xac <set_port_direction+0x1a>
  96:	18 f4       	brcc	.+6      	; 0x9e <set_port_direction+0xc>
  98:	81 34       	cpi	r24, 0x41	; 65
  9a:	31 f0       	breq	.+12     	; 0xa8 <set_port_direction+0x16>
  9c:	08 95       	ret
  9e:	83 34       	cpi	r24, 0x43	; 67
  a0:	39 f0       	breq	.+14     	; 0xb0 <set_port_direction+0x1e>
  a2:	84 34       	cpi	r24, 0x44	; 68
  a4:	39 f0       	breq	.+14     	; 0xb4 <set_port_direction+0x22>
  a6:	08 95       	ret
	{
		case 'A':
		DDRA=direction;
  a8:	6a bb       	out	0x1a, r22	; 26
		break;
  aa:	08 95       	ret
		case 'B':
		DDRB=direction;
  ac:	67 bb       	out	0x17, r22	; 23
		break;
  ae:	08 95       	ret
		case 'C':
		DDRC=direction;
  b0:	64 bb       	out	0x14, r22	; 20
		break;
  b2:	08 95       	ret
		case 'D':
		DDRD=direction;
  b4:	61 bb       	out	0x11, r22	; 17
  b6:	08 95       	ret

000000b8 <DIO_write_port>:
		default: break;
	}
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
  b8:	82 34       	cpi	r24, 0x42	; 66
  ba:	59 f0       	breq	.+22     	; 0xd2 <DIO_write_port+0x1a>
  bc:	18 f4       	brcc	.+6      	; 0xc4 <DIO_write_port+0xc>
  be:	81 34       	cpi	r24, 0x41	; 65
  c0:	31 f0       	breq	.+12     	; 0xce <DIO_write_port+0x16>
  c2:	08 95       	ret
  c4:	83 34       	cpi	r24, 0x43	; 67
  c6:	39 f0       	breq	.+14     	; 0xd6 <DIO_write_port+0x1e>
  c8:	84 34       	cpi	r24, 0x44	; 68
  ca:	39 f0       	breq	.+14     	; 0xda <DIO_write_port+0x22>
  cc:	08 95       	ret
	{
		case 'A':
		PORTA=portvalue;
  ce:	6b bb       	out	0x1b, r22	; 27
		break;
  d0:	08 95       	ret
		case 'B':
		PORTB=portvalue;
  d2:	68 bb       	out	0x18, r22	; 24
		break;
  d4:	08 95       	ret
		case 'C':
		PORTC=portvalue;
  d6:	65 bb       	out	0x15, r22	; 21
		break;
  d8:	08 95       	ret
		case 'D':
		PORTD=portvalue;
  da:	62 bb       	out	0x12, r22	; 18
  dc:	08 95       	ret

000000de <main>:
volatile unsigned char count2=0;
volatile unsigned char count3=0;

int main(void)
{
    timer_CTC_init_interrupt();
  de:	0e 94 00 01 	call	0x200	; 0x200 <timer_CTC_init_interrupt>
	seven_seg_vinit('D');
  e2:	84 e4       	ldi	r24, 0x44	; 68
  e4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <seven_seg_vinit>
	SET_BIT(DDRA,0);
  e8:	8a b3       	in	r24, 0x1a	; 26
  ea:	81 60       	ori	r24, 0x01	; 1
  ec:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,1);
  ee:	8a b3       	in	r24, 0x1a	; 26
  f0:	82 60       	ori	r24, 0x02	; 2
  f2:	8a bb       	out	0x1a, r24	; 26
    while (1) 
    {
		SET_BIT(PORTA,0);
  f4:	8b b3       	in	r24, 0x1b	; 27
  f6:	81 60       	ori	r24, 0x01	; 1
  f8:	8b bb       	out	0x1b, r24	; 27
		CLR_BIT(PORTA,1);
  fa:	8b b3       	in	r24, 0x1b	; 27
  fc:	8d 7f       	andi	r24, 0xFD	; 253
  fe:	8b bb       	out	0x1b, r24	; 27
		seven_seg_write('D',count2/10);
 100:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <count2>
 104:	6d ec       	ldi	r22, 0xCD	; 205
 106:	86 9f       	mul	r24, r22
 108:	61 2d       	mov	r22, r1
 10a:	11 24       	eor	r1, r1
 10c:	66 95       	lsr	r22
 10e:	66 95       	lsr	r22
 110:	66 95       	lsr	r22
 112:	84 e4       	ldi	r24, 0x44	; 68
 114:	0e 94 db 00 	call	0x1b6	; 0x1b6 <seven_seg_write>
		while(count3==0);
 118:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 11c:	88 23       	and	r24, r24
 11e:	e1 f3       	breq	.-8      	; 0x118 <main+0x3a>
		count3=0;
 120:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
		SET_BIT(PORTA,1);
 124:	8b b3       	in	r24, 0x1b	; 27
 126:	82 60       	ori	r24, 0x02	; 2
 128:	8b bb       	out	0x1b, r24	; 27
		CLR_BIT(PORTA,0);
 12a:	8b b3       	in	r24, 0x1b	; 27
 12c:	8e 7f       	andi	r24, 0xFE	; 254
 12e:	8b bb       	out	0x1b, r24	; 27
		seven_seg_write('D',(count2%10));
 130:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <count2>
 134:	8d ec       	ldi	r24, 0xCD	; 205
 136:	68 9f       	mul	r22, r24
 138:	81 2d       	mov	r24, r1
 13a:	11 24       	eor	r1, r1
 13c:	86 95       	lsr	r24
 13e:	86 95       	lsr	r24
 140:	86 95       	lsr	r24
 142:	88 0f       	add	r24, r24
 144:	98 2f       	mov	r25, r24
 146:	99 0f       	add	r25, r25
 148:	99 0f       	add	r25, r25
 14a:	89 0f       	add	r24, r25
 14c:	68 1b       	sub	r22, r24
 14e:	84 e4       	ldi	r24, 0x44	; 68
 150:	0e 94 db 00 	call	0x1b6	; 0x1b6 <seven_seg_write>
		while(count3==0);
 154:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 158:	88 23       	and	r24, r24
 15a:	e1 f3       	breq	.-8      	; 0x154 <main+0x76>
		count3=0;
 15c:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
		if (count1>100)
 160:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <count1>
 164:	85 36       	cpi	r24, 0x65	; 101
 166:	30 f2       	brcs	.-116    	; 0xf4 <main+0x16>
		{
			count2++;
 168:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <count2>
 16c:	8f 5f       	subi	r24, 0xFF	; 255
 16e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <count2>
			count1=0;
 172:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <count1>
			if (count2==30)
 176:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <count2>
 17a:	8e 31       	cpi	r24, 0x1E	; 30
 17c:	09 f0       	breq	.+2      	; 0x180 <main+0xa2>
 17e:	ba cf       	rjmp	.-140    	; 0xf4 <main+0x16>
			{
				count2=0;
 180:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <count2>
 184:	b7 cf       	rjmp	.-146    	; 0xf4 <main+0x16>

00000186 <__vector_10>:
		}
    }
}

ISR (TIMER0_COMP_vect)
{
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	8f 93       	push	r24
	count1++;
 192:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <count1>
 196:	8f 5f       	subi	r24, 0xFF	; 255
 198:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <count1>
	count3=1;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 1a2:	8f 91       	pop	r24
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

000001ae <seven_seg_vinit>:
 1ae:	6f ef       	ldi	r22, 0xFF	; 255
 1b0:	0e 94 49 00 	call	0x92	; 0x92 <set_port_direction>
 1b4:	08 95       	ret

000001b6 <seven_seg_write>:
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	2a 97       	sbiw	r28, 0x0a	; 10
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	cd bf       	out	0x3d, r28	; 61
 1ca:	9a e0       	ldi	r25, 0x0A	; 10
 1cc:	e0 e6       	ldi	r30, 0x60	; 96
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	de 01       	movw	r26, r28
 1d2:	11 96       	adiw	r26, 0x01	; 1
 1d4:	01 90       	ld	r0, Z+
 1d6:	0d 92       	st	X+, r0
 1d8:	9a 95       	dec	r25
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <seven_seg_write+0x1e>
 1dc:	e1 e0       	ldi	r30, 0x01	; 1
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	ec 0f       	add	r30, r28
 1e2:	fd 1f       	adc	r31, r29
 1e4:	e6 0f       	add	r30, r22
 1e6:	f1 1d       	adc	r31, r1
 1e8:	60 81       	ld	r22, Z
 1ea:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_write_port>
 1ee:	2a 96       	adiw	r28, 0x0a	; 10
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	f8 94       	cli
 1f4:	de bf       	out	0x3e, r29	; 62
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	cd bf       	out	0x3d, r28	; 61
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	08 95       	ret

00000200 <timer_CTC_init_interrupt>:


void timer_CTC_init_interrupt(void)
{
	// wave generation mode
	SET_BIT(TCCR0,WGM01);
 200:	83 b7       	in	r24, 0x33	; 51
 202:	88 60       	ori	r24, 0x08	; 8
 204:	83 bf       	out	0x33, r24	; 51
	// load value in OCR0
	OCR0=64;
 206:	80 e4       	ldi	r24, 0x40	; 64
 208:	8c bf       	out	0x3c, r24	; 60
	// clock select
	SET_BIT(TCCR0,CS00);
 20a:	83 b7       	in	r24, 0x33	; 51
 20c:	81 60       	ori	r24, 0x01	; 1
 20e:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 210:	83 b7       	in	r24, 0x33	; 51
 212:	84 60       	ori	r24, 0x04	; 4
 214:	83 bf       	out	0x33, r24	; 51
	sei();
 216:	78 94       	sei
	// interrupt mask register
	SET_BIT(TIMSK,OCIE0);
 218:	89 b7       	in	r24, 0x39	; 57
 21a:	82 60       	ori	r24, 0x02	; 2
 21c:	89 bf       	out	0x39, r24	; 57
 21e:	08 95       	ret

00000220 <_exit>:
 220:	f8 94       	cli

00000222 <__stop_program>:
 222:	ff cf       	rjmp	.-2      	; 0x222 <__stop_program>
